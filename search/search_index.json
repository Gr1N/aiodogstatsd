{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"aiodogstatsd \u00b6 aiodogstatsd is an asyncio-based client for sending metrics to StatsD with support of DogStatsD extension. Library fully tested with statsd_exporter and supports gauge , counter , histogram , distribution and timing types. Info aiodogstatsd client by default uses 9125 port. It's a default port for statsd_exporter and it's different from 8125 which is used by default in StatsD and DataDog . Initialize the client with the proper port you need if it's different from 9125 . Installation \u00b6 Just type: 1 pip install aiodogstatsd ...or if you're interested in integration with AIOHTTP , Sanic or Starlette frameworks specify corresponding extras: 1 pip install aiodogstatsd [ aiohttp,sanic,starlette ] At a glance \u00b6 Just simply use client as a context manager and send any metric you want: 1 2 3 4 5 6 7 8 9 10 11 import asyncio import aiodogstatsd async def main (): async with aiodogstatsd . Client () as client : client . increment ( \"users.online\" ) asyncio . run ( main ())","title":"Home"},{"location":"#aiodogstatsd","text":"aiodogstatsd is an asyncio-based client for sending metrics to StatsD with support of DogStatsD extension. Library fully tested with statsd_exporter and supports gauge , counter , histogram , distribution and timing types. Info aiodogstatsd client by default uses 9125 port. It's a default port for statsd_exporter and it's different from 8125 which is used by default in StatsD and DataDog . Initialize the client with the proper port you need if it's different from 9125 .","title":"aiodogstatsd"},{"location":"#installation","text":"Just type: 1 pip install aiodogstatsd ...or if you're interested in integration with AIOHTTP , Sanic or Starlette frameworks specify corresponding extras: 1 pip install aiodogstatsd [ aiohttp,sanic,starlette ]","title":"Installation"},{"location":"#at-a-glance","text":"Just simply use client as a context manager and send any metric you want: 1 2 3 4 5 6 7 8 9 10 11 import asyncio import aiodogstatsd async def main (): async with aiodogstatsd . Client () as client : client . increment ( \"users.online\" ) asyncio . run ( main ())","title":"At a glance"},{"location":"usage/","text":"Usage \u00b6 Basics \u00b6 aiodogstatsd.Client can be initialized with: host \u2014 host string of your StatsD server (default: localhost ); port \u2014 post of your StatsD server (default: 9125 ); namespace \u2014 optional namespace string to prefix all metrics; constant_tags \u2014 optional tags dictionary to apply to all metrics; read_timeout (default: 0.5 ); close_timeout ; sample_rate (default: 1 ). Below you can find an example of client initialization. Keep your eyes on lines 13 and 15. You always need to not to forget to initialize connection and close it at the end: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 client = aiodogstatsd . Client ( host = \"127.0.0.1\" , port = 8125 , namespace = \"hello\" , constant_tags = { \"service\" : \"auth\" , }, read_timeout = 0.5 , close_timeout = 0.5 , sample_rate = 1 , ) await client . connect () client . increment ( \"users.online\" ) await client . close () Context manager \u00b6 As an option you can use aiodogstatsd.Client as a context manager. In that case you don't need to remember to initialize and close connection: 1 2 async with aiodogstatsd . Client () as client : client . increment ( \"users.online\" ) Sending metrics \u00b6 Gauge \u00b6 Record the value of a gauge, optionally setting tags and a sample_rate . 1 client . gauge ( \"users.online\" , value = 42 ) Increment \u00b6 Increment a counter, optionally setting a value , tags and a sample_rate . 1 client . increment ( \"users.online\" ) Decrement \u00b6 Decrement a counter, optionally setting a value , tags and a sample_rate . 1 client . decrement ( \"users.online\" ) Histogram \u00b6 Sample a histogram value, optionally setting tags and a sample_rate . 1 client . histogram ( \"request.time\" , value = 0.2 ) Distribution \u00b6 Send a global distribution value, optionally setting tags and a sample_rate . 1 client . distribution ( \"uploaded.file.size\" , value = 8819 ) Timing \u00b6 Record a timing, optionally setting tags and a sample_rate . 1 client . timing ( \"query.time\" , value = 0.5 ) TimeIt \u00b6 Context manager for easily timing methods, optionally settings tags and a sample_rate . 1 2 with client . timeit ( \"query.time\" ): ...","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#basics","text":"aiodogstatsd.Client can be initialized with: host \u2014 host string of your StatsD server (default: localhost ); port \u2014 post of your StatsD server (default: 9125 ); namespace \u2014 optional namespace string to prefix all metrics; constant_tags \u2014 optional tags dictionary to apply to all metrics; read_timeout (default: 0.5 ); close_timeout ; sample_rate (default: 1 ). Below you can find an example of client initialization. Keep your eyes on lines 13 and 15. You always need to not to forget to initialize connection and close it at the end: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 client = aiodogstatsd . Client ( host = \"127.0.0.1\" , port = 8125 , namespace = \"hello\" , constant_tags = { \"service\" : \"auth\" , }, read_timeout = 0.5 , close_timeout = 0.5 , sample_rate = 1 , ) await client . connect () client . increment ( \"users.online\" ) await client . close ()","title":"Basics"},{"location":"usage/#context-manager","text":"As an option you can use aiodogstatsd.Client as a context manager. In that case you don't need to remember to initialize and close connection: 1 2 async with aiodogstatsd . Client () as client : client . increment ( \"users.online\" )","title":"Context manager"},{"location":"usage/#sending-metrics","text":"","title":"Sending metrics"},{"location":"usage/#gauge","text":"Record the value of a gauge, optionally setting tags and a sample_rate . 1 client . gauge ( \"users.online\" , value = 42 )","title":"Gauge"},{"location":"usage/#increment","text":"Increment a counter, optionally setting a value , tags and a sample_rate . 1 client . increment ( \"users.online\" )","title":"Increment"},{"location":"usage/#decrement","text":"Decrement a counter, optionally setting a value , tags and a sample_rate . 1 client . decrement ( \"users.online\" )","title":"Decrement"},{"location":"usage/#histogram","text":"Sample a histogram value, optionally setting tags and a sample_rate . 1 client . histogram ( \"request.time\" , value = 0.2 )","title":"Histogram"},{"location":"usage/#distribution","text":"Send a global distribution value, optionally setting tags and a sample_rate . 1 client . distribution ( \"uploaded.file.size\" , value = 8819 )","title":"Distribution"},{"location":"usage/#timing","text":"Record a timing, optionally setting tags and a sample_rate . 1 client . timing ( \"query.time\" , value = 0.5 )","title":"Timing"},{"location":"usage/#timeit","text":"Context manager for easily timing methods, optionally settings tags and a sample_rate . 1 2 with client . timeit ( \"query.time\" ): ...","title":"TimeIt"},{"location":"frameworks/aiohttp/","text":"AIOHTTP \u00b6 aiodogstatsd library can be easily used with AIOHTTP web framework by using cleanup context and middleware provided. At first you need to install aiodogstatsd with required extras: 1 pip install aiodogstatsd [ aiohttp ] Then you can use code below as is to get initialized client and middleware: 1 2 3 4 5 6 7 from aiohttp import web from aiodogstatsd.contrib import aiohttp as aiodogstatsd app = web . Application ( middlewares = [ aiodogstatsd . middleware_factory ()]) app . cleanup_ctx . append ( aiodogstatsd . cleanup_context_factory ()) Optionally you can provide additional configuration to the cleanup context factory: client_app_key \u2014 a key to store initialized aiodogstatsd.Client in application context (default: statsd ); host \u2014 host string of your StatsD server (default: localhost ); port \u2014 post of your StatsD server (default: 9125 ); namespace \u2014 optional namespace string to prefix all metrics; constant_tags \u2014 optional tags dictionary to apply to all metrics; read_timeout (default: 0.5 ); close_timeout ; sample_rate (default: 1 ). Optionally you can provide additional configuration to the middleware factory: client_app_key \u2014 a key to lookup aiodogstatsd.Client in application context (default: statsd ); request_duration_metric_name \u2014 name of request duration metric (default: http_request_duration ); collect_not_allowed \u2014 collect or not 405 Method Not Allowed responses; collect_not_found \u2014 collect or not 404 Not Found responses.","title":"AIOHTTP"},{"location":"frameworks/aiohttp/#aiohttp","text":"aiodogstatsd library can be easily used with AIOHTTP web framework by using cleanup context and middleware provided. At first you need to install aiodogstatsd with required extras: 1 pip install aiodogstatsd [ aiohttp ] Then you can use code below as is to get initialized client and middleware: 1 2 3 4 5 6 7 from aiohttp import web from aiodogstatsd.contrib import aiohttp as aiodogstatsd app = web . Application ( middlewares = [ aiodogstatsd . middleware_factory ()]) app . cleanup_ctx . append ( aiodogstatsd . cleanup_context_factory ()) Optionally you can provide additional configuration to the cleanup context factory: client_app_key \u2014 a key to store initialized aiodogstatsd.Client in application context (default: statsd ); host \u2014 host string of your StatsD server (default: localhost ); port \u2014 post of your StatsD server (default: 9125 ); namespace \u2014 optional namespace string to prefix all metrics; constant_tags \u2014 optional tags dictionary to apply to all metrics; read_timeout (default: 0.5 ); close_timeout ; sample_rate (default: 1 ). Optionally you can provide additional configuration to the middleware factory: client_app_key \u2014 a key to lookup aiodogstatsd.Client in application context (default: statsd ); request_duration_metric_name \u2014 name of request duration metric (default: http_request_duration ); collect_not_allowed \u2014 collect or not 405 Method Not Allowed responses; collect_not_found \u2014 collect or not 404 Not Found responses.","title":"AIOHTTP"},{"location":"frameworks/sanic/","text":"Sanic \u00b6 aiodogstatsd library can be easily used with Sanic web framework by using listeners and middlewares provided. At first you need to install aiodogstatsd with required extras: 1 pip install aiodogstatsd [ sanic ] Then you can use code below as is to get initialized client and middlewares: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from sanic import Sanic from aiodogstatsd.contrib import sanic as aiodogstatsd app = Sanic ( name = \"aiodogstatsd\" ) listener_setup , listener_close = aiodogstatsd . listeners_factory () app . register_listener ( listener_setup , \"before_server_start\" ) app . register_listener ( listener_close , \"after_server_stop\" ) middleware_req , middleware_resp = aiodogstatsd . middlewares_factory () app . register_middleware ( middleware_req , attach_to = \"request\" ) app . register_middleware ( middleware_resp , attach_to = \"response\" ) Optionally you can provide additional configuration to the listeners factory: client_app_key \u2014 a key to store initialized aiodogstatsd.Client in application context (default: statsd ); host \u2014 host string of your StatsD server (default: localhost ); port \u2014 post of your StatsD server (default: 9125 ); namespace \u2014 optional namespace string to prefix all metrics; constant_tags \u2014 optional tags dictionary to apply to all metrics; read_timeout (default: 0.5 ); close_timeout ; sample_rate (default: 1 ). Optionally you can provide additional configuration to the middlewares factory: client_app_key \u2014 a key to lookup aiodogstatsd.Client in application context (default: statsd ); request_duration_metric_name \u2014 name of request duration metric (default: http_request_duration ); collect_not_allowed \u2014 collect or not 405 Method Not Allowed responses; collect_not_found \u2014 collect or not 404 Not Found responses.","title":"Sanic"},{"location":"frameworks/sanic/#sanic","text":"aiodogstatsd library can be easily used with Sanic web framework by using listeners and middlewares provided. At first you need to install aiodogstatsd with required extras: 1 pip install aiodogstatsd [ sanic ] Then you can use code below as is to get initialized client and middlewares: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from sanic import Sanic from aiodogstatsd.contrib import sanic as aiodogstatsd app = Sanic ( name = \"aiodogstatsd\" ) listener_setup , listener_close = aiodogstatsd . listeners_factory () app . register_listener ( listener_setup , \"before_server_start\" ) app . register_listener ( listener_close , \"after_server_stop\" ) middleware_req , middleware_resp = aiodogstatsd . middlewares_factory () app . register_middleware ( middleware_req , attach_to = \"request\" ) app . register_middleware ( middleware_resp , attach_to = \"response\" ) Optionally you can provide additional configuration to the listeners factory: client_app_key \u2014 a key to store initialized aiodogstatsd.Client in application context (default: statsd ); host \u2014 host string of your StatsD server (default: localhost ); port \u2014 post of your StatsD server (default: 9125 ); namespace \u2014 optional namespace string to prefix all metrics; constant_tags \u2014 optional tags dictionary to apply to all metrics; read_timeout (default: 0.5 ); close_timeout ; sample_rate (default: 1 ). Optionally you can provide additional configuration to the middlewares factory: client_app_key \u2014 a key to lookup aiodogstatsd.Client in application context (default: statsd ); request_duration_metric_name \u2014 name of request duration metric (default: http_request_duration ); collect_not_allowed \u2014 collect or not 405 Method Not Allowed responses; collect_not_found \u2014 collect or not 404 Not Found responses.","title":"Sanic"},{"location":"frameworks/starlette/","text":"Starlette \u00b6 aiodogstatsd library can be easily used with Starlette web framework by using client and middleware provided. At first you need to install aiodogstatsd with required extras: 1 pip install aiodogstatsd [ starlette ] Then you can use code below as is to get initialized client and middleware: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from starlette.applications import Starlette from starlette.middleware import Middleware import aiodogstatsd from aiodogstatsd.contrib.starlette import StatsDMiddleware client = aiodogstatsd . Client () app = Starlette ( middleware = [ Middleware ( StatsDMiddleware , client = client )], on_startup = [ client . connect ], on_shutdown = [ client . close ], ) Optionally you can provide additional configuration to the middleware: request_duration_metric_name \u2014 name of request duration metric (default: http_request_duration ); collect_not_allowed \u2014 collect or not 405 Method Not Allowed responses; collect_not_found \u2014 collect or not 404 Not Found responses.","title":"Starlette"},{"location":"frameworks/starlette/#starlette","text":"aiodogstatsd library can be easily used with Starlette web framework by using client and middleware provided. At first you need to install aiodogstatsd with required extras: 1 pip install aiodogstatsd [ starlette ] Then you can use code below as is to get initialized client and middleware: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from starlette.applications import Starlette from starlette.middleware import Middleware import aiodogstatsd from aiodogstatsd.contrib.starlette import StatsDMiddleware client = aiodogstatsd . Client () app = Starlette ( middleware = [ Middleware ( StatsDMiddleware , client = client )], on_startup = [ client . connect ], on_shutdown = [ client . close ], ) Optionally you can provide additional configuration to the middleware: request_duration_metric_name \u2014 name of request duration metric (default: http_request_duration ); collect_not_allowed \u2014 collect or not 405 Method Not Allowed responses; collect_not_found \u2014 collect or not 404 Not Found responses.","title":"Starlette"}]}